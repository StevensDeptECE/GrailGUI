// This was previously at the bottom of datatype.hh. As datatype.hh is now
// autogenerated,these notes were moved out of the file in the event someone
// needs them in the future.

/*

Examples of packet data:  All numbers shown are bytes, NOT ascii text numbers

Example1: fixed data with one 64 bit unsigned integer, and one double precision
number. Server sends 8 + 8 bytes, the client knows from context exactly what is
expected for this page. 1234567890 123.456

Example2: A table with 3 fixed columns: first name, last name, phone.  The
client knows the data type of each column, so it is not specified, but since
strings are variable, the lengths are encoded.  This example has types:
string1,string1,uint8
The length of the list is not known, so it is transmitted
LIST1 2
3Dov6Kruger2125551212
8Branimir6Kruger2123331215

Example3: A query goes to the server and the columns are not known in advance,
so the server encodes the metadata RECORD1 5 string1 string1 string1 uint1
  float4

list1 1
  3Dov 6Kruger 22Dov.Kruger@stevens.edu 2015551212 20.4512121

Note: functions are only used in binary HTML representation.  Typically you
would never need a function to send between machines, and you can always write
the code longhand, without a function. Therefore, functions are an optimization
to more compactly encode binary HTML when there are repetitive features.
Eventually, functions may become a way to create higher-level entities that can
create reusable packages. Probably objects will be useful as well.

CSP is not a full programming language by design, but if we can build in ways to
safely process data locally on the client while remaining provably safe, we can
do that.

FUNCPARAM1 (uint4 c1, uint4 c2, uint4 c3)
 <tr class="foo"><td><%= c1 %></td><td><%= c2 %></td><td><%= c3 %></td></tr>

FUNCPARAM1
  3 7  // 3 parameters, contents 7 entities
  c1 c2 c3  // 24 bytes
  6 2 1  // length 6 contents TR class foo is 1 (3 bytes)
    2 3 0  // contents length=2 TD class unspecified (default) (3 bytes)
    PARAM 0 // c1
    2 3 0  // contents length = 2 TD default class  (3 bytes)
    PARAM 1
    2 3 0
    PARAM 2

 */

/*
class List1 {
private:
        uint8_t size;
public:
        List1(uint8_t size) : size(size) {}
};
*/

class List2 {
 private:
  uint16_t size;

 public:
  List2(uint16_t size) : size(size) {}
};

class Record {
 private:
  vector<DataType> fieldTypes;

 public:
  Record() {}
  void add(DataType t) { fieldTypes.push_back(t); }
  friend ostream& operator<<(ostream& s, const Record& r) {
    DataType t = r.fieldTypes.size() < 256
                     ? DataType::STRUCT8
                     : (r.fieldTypes.size() < 65536 ? DataType::STRUCT16
                                                    : DataType::STRUCT32);
    s << DataTypeNames[uint32_t(t)];
    for (auto x : r.fieldTypes) {
      s << DataTypeNames[uint32_t(x)] << ' ';
    }
    return s;
  }
};
